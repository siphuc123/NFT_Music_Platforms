{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\nvar inherits_browser = {\n  exports: {}\n};\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function () {};\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\nutils$9.zero2 = zero2;\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\nutils$9.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\nutils$9.rotr32 = rotr32$1;\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\nutils$9.rotl32 = rotl32$2;\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\nutils$9.sum32 = sum32$3;\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n  return this;\n};\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++) res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n  return res;\n};\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\ncommon$4.ch32 = ch32$1;\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\ncommon$4.maj32 = maj32$1;\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\ncommon$4.g0_256 = g0_256$1;\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\nvar utils$4 = utils$9;\nvar SHA256 = _256;\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nvar utils$2 = utils$9;\nvar SHA512 = _512;\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac;\n\n  // Proxy hash functions to the main object\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\nvar hash = hash$1;\nconst version$2 = \"logger/5.6.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug(...args) {\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info(...args) {\n    this._log(Logger.levels.INFO, args);\n  }\n  warn(...args) {\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.6.0\";\nconst logger = new Logger(version$1);\n///////////////////////////////\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n  if (typeof value === \"string\") {\n    return false;\n  }\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) {\n      result.push(0);\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nconst version = \"sha2/5.6.0\";\nnew Logger(version);\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n\n/**\n * Layout for a public key\n */\n\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } // Couldn't determine allocated size of layout\n\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\n/**\n * The message header, identifying signed and read-only account\n */\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null ? (await connection.confirmTransaction({\n    signature: signature,\n    blockhash: transaction.recentBlockhash,\n    lastValidBlockHeight: transaction.lastValidBlockHeight\n  }, options && options.commitment)).value : (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = fastStableStringify;\nconst URL = globalThis.URL;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\nvar _process$env$npm_pack;\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429\n        /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(rawSignature, (result, context) => {\n          subscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          done = true;\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const expiryPromise = new Promise(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip':\n            {\n              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n              break;\n            }\n        }\n        timeoutId = setTimeout(() => resolve({\n          __type: TransactionStatus.TIMED_OUT,\n          timeoutMs\n        }), timeoutMs);\n      } else {\n        let config = strategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({\n            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n          });\n        })();\n      }\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   */\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._subscriptionsByHash[hash] = {\n                ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n              this._subscriptionsByHash[hash] = {\n                ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribing'\n                };\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._subscriptionsByHash[hash] = {\n                ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */);\n\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64'\n    /* encoding */, filters ? {\n      filters: filters\n    } : undefined\n    /* extra */);\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n}\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionStatus, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert$6","assert","val","msg","Error","equal","assertEqual","l","r","Object","create","inherits_browser","exports","inherits","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","assert$5","utils$9","isSurrogatePair","i","charCodeAt","length","toArray","enc","Array","isArray","slice","res","p","c","replace","push","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","k","split32","m","rotr32$1","rotr32","b","rotl32$2","rotl32","sum32$3","sum32","a","sum32_3$1","sum32_3","sum32_4$2","sum32_4","d","sum32_5$2","sum32_5","e","sum64$1","sum64","buf","pos","ah","al","bh","bl","lo","hi","sum64_hi$1","sum64_hi","sum64_lo$1","sum64_lo","sum64_4_hi$1","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo$1","sum64_4_lo","sum64_5_hi$1","sum64_5_hi","eh","el","sum64_5_lo$1","sum64_5_lo","rotr64_hi$1","rotr64_hi","num","rotr64_lo$1","rotr64_lo","shr64_hi$1","shr64_hi","shr64_lo$1","shr64_lo","utils$8","assert$4","BlockHash$4","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common$5","update","concat","_update","digest","_pad","_digest","pad","bytes","t","utils$7","ft_1$1","ft_1","s","x","y","z","ch32$1","p32","maj32$1","common$4","ch32","maj32","s0_256$1","s0_256","s1_256$1","s1_256","g0_256$1","g0_256","g1_256$1","g1_256","utils$6","common$3","shaCommon$1","rotl32$1","sum32$2","sum32_5$1","BlockHash$3","sha1_K","SHA1","call","h","W","_1","utils$5","common$2","shaCommon","assert$3","sum32$1","sum32_4$1","BlockHash$2","sha256_K","SHA256$1","SHA256","_256","f","g","T1","T2","utils$4","SHA224","_224","utils$3","common$1","assert$2","BlockHash$1","sha512_K","SHA512$1","SHA512","_512","_prepareBlock","c0_hi","g1_512_hi","c0_lo","g1_512_lo","c1_hi","c1_lo","c2_hi","g0_512_hi","c2_lo","g0_512_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","s1_512_hi","s1_512_lo","ch64_hi","ch64_lo","c4_hi","c4_lo","T1_hi","T1_lo","s0_512_hi","s0_512_lo","maj64_hi","maj64_lo","T2_hi","T2_lo","xh","xl","yh","yl","zh","zl","utils$2","SHA384","_384","sha","sha1","sha224","sha256","sha384","sha512","utils$1","common","RIPEMD160","ripemd","ripemd160","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","j","T","K","rh","Kh","sh","utils","assert$1","Hmac","hash","key","Hash","inner","outer","_init","hmac","init","version$2","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","version$1","logger","isHexable","toHexString","addSlice","array","arguments","isInteger","isBytes","v","arrayify","options","result","unshift","allowMissingPrefix","substring","isHexString","hexPad","match","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","decode","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","map","Map","MAX_SEED_LENGTH","isPublicKeyData","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","createProgramAddressSync","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","isOnCurve","pubkeyData","pubkey","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","elementLayout","layout","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","encodeData","allocLength","layoutFields","instruction","index","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","decodeLength","size","elem","shift","encodeLength","rem_len","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","blockhash","nonceInstruction","signers","add","items","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","compiledInstructions","indexOf","meta","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","authority","payer","Number","decodeExtendLookupTable","addresses","lookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","BPF_LOADER_DEPRECATED_PROGRAM_ID","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","URL","globalThis","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","fetchImpl","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","makeWebsocketUrl","endpoint","useHttps","protocol","host","port","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","_process$env$npm_pack","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","Client","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","rawConfig","_buildArgsAtLeastConfirmed","getBlockProduction","extra","rest","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify$1","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$7","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sources":["C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\to-buffer.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\minimalistic-assert\\index.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\inherits\\inherits_browser.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\utils.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\common.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\common.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\1.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\256.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\224.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\512.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha\\384.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\sha.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\ripemd.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash\\hmac.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\hash.js\\lib\\hash.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\logger\\lib.esm\\_version.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\logger\\lib.esm\\index.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\bytes\\lib.esm\\_version.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\bytes\\lib.esm\\index.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\sha2\\lib.esm\\_version.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\@ethersproject\\sha2\\lib.esm\\sha2.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\borsh-schema.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\publickey.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\account.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\layout.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\bigint.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\instruction.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\fee-calculator.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\nonce-account.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\sysvar.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\transaction-constants.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\shortvec-encoding.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\message.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\assert.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\transaction.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\system-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\address-lookup-table-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\bpf-loader-deprecated.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\send-and-confirm-transaction.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\sleep.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\loader.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\bpf-loader.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\compute-budget.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\node_modules\\fast-stable-stringify\\index.js","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\url-impl.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\epoch-schedule.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\errors.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\__forks__\\browser\\fetch-impl.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\timing.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\tx-expiry-custom-errors.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\makeWebsocketUrl.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\connection.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\keypair.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\ed25519-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\stake-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\secp256k1-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\validator-info.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\vote-account.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\vote-program.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\send-and-confirm-raw-transaction.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\util\\cluster.ts","C:\\Users\\Admin\\Desktop\\XinViec\\XTH-18_09\\Code\\list-all-nfts-from-wallet\\node_modules\\@solana\\web3.js\\src\\index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {URL} from './url-impl';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './address-lookup-table-program';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/tx-expiry-custom-errors';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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AE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACtD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvD;AAED,IAAI6H,EAAE,GAAG,CACP,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACtD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAA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"},"metadata":{},"sourceType":"module"}