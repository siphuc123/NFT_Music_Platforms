{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.mjs';\nimport { WalletSendTransactionError, WalletSignTransactionError } from './errors.mjs';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection, options = {}) {\n    let emit = true;\n    try {\n      try {\n        transaction = await this.prepareTransaction(transaction, connection);\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n        transaction = await this.signTransaction(transaction);\n        const rawTransaction = transaction.serialize();\n        return await connection.sendRawTransaction(rawTransaction, sendOptions);\n      } catch (error) {\n        // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n        if (error instanceof WalletSignTransactionError) {\n          emit = false;\n          throw error;\n        }\n        throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n      throw error;\n    }\n  }\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"names":["BaseWalletAdapter","WalletSendTransactionError","WalletSignTransactionError","BaseSignerWalletAdapter","sendTransaction","transaction","connection","options","emit","prepareTransaction","signers","sendOptions","length","partialSign","signTransaction","rawTransaction","serialize","sendRawTransaction","error","message","BaseMessageSignerWalletAdapter"],"sources":["E:\\ThucTap\\list-all-nfts-from-wallet\\node_modules\\@solana\\wallet-adapter-base\\src\\signer.ts"],"sourcesContent":["import { Connection, Transaction, TransactionSignature } from '@solana/web3.js';\nimport { BaseWalletAdapter, SendTransactionOptions, WalletAdapter } from './adapter';\nimport { WalletError, WalletSendTransactionError, WalletSignTransactionError } from './errors';\n\nexport interface SignerWalletAdapterProps {\n    signTransaction(transaction: Transaction): Promise<Transaction>;\n    signAllTransactions(transaction: Transaction[]): Promise<Transaction[]>;\n}\n\nexport type SignerWalletAdapter = WalletAdapter & SignerWalletAdapterProps;\n\nexport abstract class BaseSignerWalletAdapter extends BaseWalletAdapter implements SignerWalletAdapter {\n    async sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options: SendTransactionOptions = {}\n    ): Promise<TransactionSignature> {\n        let emit = true;\n        try {\n            try {\n                transaction = await this.prepareTransaction(transaction, connection);\n\n                const { signers, ...sendOptions } = options;\n                signers?.length && transaction.partialSign(...signers);\n\n                transaction = await this.signTransaction(transaction);\n\n                const rawTransaction = transaction.serialize();\n\n                return await connection.sendRawTransaction(rawTransaction, sendOptions);\n            } catch (error: any) {\n                // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n                if (error instanceof WalletSignTransactionError) {\n                    emit = false;\n                    throw error;\n                }\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            if (emit) {\n                this.emit('error', error);\n            }\n            throw error;\n        }\n    }\n\n    abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n    abstract signAllTransactions(transaction: Transaction[]): Promise<Transaction[]>;\n}\n\nexport interface MessageSignerWalletAdapterProps {\n    signMessage(message: Uint8Array): Promise<Uint8Array>;\n}\n\nexport type MessageSignerWalletAdapter = WalletAdapter & MessageSignerWalletAdapterProps;\n\nexport abstract class BaseMessageSignerWalletAdapter\n    extends BaseSignerWalletAdapter\n    implements MessageSignerWalletAdapter\n{\n    abstract signMessage(message: Uint8Array): Promise<Uint8Array>;\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAA+C,eAAY;AACrF,SAAsBC,0BAA0B,EAAEC,0BAA0B,QAAQ,cAAW;AAS/F,OAAM,MAAgBC,uBAAwB,SAAQH,iBAAiB;EACnE,MAAMI,eAAeA,CACjBC,WAAwB,EACxBC,UAAsB,EACtBC,OAAA,GAAkC,EAAE;IAEpC,IAAIC,IAAI,GAAG,IAAI;IACf,IAAI;MACA,IAAI;QACAH,WAAW,GAAG,MAAM,IAAI,CAACI,kBAAkB,CAACJ,WAAW,EAAEC,UAAU,CAAC;QAEpE,MAAM;UAAEI,OAAO;UAAE,GAAGC;QAAW,CAAE,GAAGJ,OAAO;QAC3C,CAAAG,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,MAAM,KAAIP,WAAW,CAACQ,WAAW,CAAC,GAAGH,OAAO,CAAC;QAEtDL,WAAW,GAAG,MAAM,IAAI,CAACS,eAAe,CAACT,WAAW,CAAC;QAErD,MAAMU,cAAc,GAAGV,WAAW,CAACW,SAAS,EAAE;QAE9C,OAAO,MAAMV,UAAU,CAACW,kBAAkB,CAACF,cAAc,EAAEJ,WAAW,CAAC;OAC1E,CAAC,OAAOO,KAAU,EAAE;QACjB;QACA,IAAIA,KAAK,YAAYhB,0BAA0B,EAAE;UAC7CM,IAAI,GAAG,KAAK;UACZ,MAAMU,KAAK;;QAEf,MAAM,IAAIjB,0BAA0B,CAACiB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,OAAO,EAAED,KAAK,CAAC;;KAElE,CAAC,OAAOA,KAAU,EAAE;MACjB,IAAIV,IAAI,EAAE;QACN,IAAI,CAACA,IAAI,CAAC,OAAO,EAAEU,KAAK,CAAC;;MAE7B,MAAMA,KAAK;;EAEnB;;AAYJ,OAAM,MAAgBE,8BAClB,SAAQjB,uBAAuB"},"metadata":{},"sourceType":"module"}